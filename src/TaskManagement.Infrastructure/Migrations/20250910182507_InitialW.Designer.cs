// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskManagement.Infrastructure.DbContexts;

#nullable disable

namespace TaskManagement.Infrastructure.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    [Migration("20250910182507_InitialW")]
    partial class InitialW
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("TaskManagement")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskManagement.Domain.Aggregate.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Author", "TaskManagement.Domain.Aggregate.Issue.Author#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("author");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Description", "TaskManagement.Domain.Aggregate.Issue.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "TaskManagement.Domain.Aggregate.Issue.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_issues");

                    b.ToTable("issues", "TaskManagement");
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.SubIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("issue_id")
                        .HasColumnType("uuid")
                        .HasColumnName("issue_id");

                    b.ComplexProperty<Dictionary<string, object>>("Author", "TaskManagement.Domain.Entities.SubIssue.Author#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("author");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Description", "TaskManagement.Domain.Entities.SubIssue.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "TaskManagement.Domain.Entities.SubIssue.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_sub_issues");

                    b.HasIndex("issue_id")
                        .HasDatabaseName("ix_sub_issues_issue_id");

                    b.ToTable("sub_issues", "TaskManagement");
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregate.Issue", b =>
                {
                    b.OwnsOne("TaskManagement.Domain.ValueObjects.Name", "Assignee", b1 =>
                        {
                            b1.Property<Guid>("IssueId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("assignee");

                            b1.HasKey("IssueId");

                            b1.ToTable("issues", "TaskManagement");

                            b1.WithOwner()
                                .HasForeignKey("IssueId")
                                .HasConstraintName("fk_issues_issues_id");
                        });

                    b.Navigation("Assignee")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManagement.Domain.Entities.SubIssue", b =>
                {
                    b.HasOne("TaskManagement.Domain.Aggregate.Issue", null)
                        .WithMany("SubIssues")
                        .HasForeignKey("issue_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sub_issues_issues_issue_id");

                    b.OwnsOne("TaskManagement.Domain.ValueObjects.Name", "Assignee", b1 =>
                        {
                            b1.Property<Guid>("SubIssueId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("assignee");

                            b1.HasKey("SubIssueId");

                            b1.ToTable("sub_issues", "TaskManagement");

                            b1.WithOwner()
                                .HasForeignKey("SubIssueId")
                                .HasConstraintName("fk_sub_issues_sub_issues_id");
                        });

                    b.Navigation("Assignee")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManagement.Domain.Aggregate.Issue", b =>
                {
                    b.Navigation("SubIssues");
                });
#pragma warning restore 612, 618
        }
    }
}
